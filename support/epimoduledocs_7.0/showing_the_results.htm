<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Showing the Results</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?showing_the_results.htm"; }
  else { parent.quicksync('a7.3.2.1.3'); }
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Showing the Results</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="introduction.htm">Top</a>&nbsp;
     <a href="add_the_facet_selectors.htm">Previous</a>&nbsp;
     <a href="faceted_search.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>The results of faceted navigation and search queries are often shown in a way specific to a solution. Also the most typical pattern for showing candidate topics (results) is by writing a custom ASPX page that includes the facet controls (the selectors and FSO). For this reason no standard web parts or controls are provided to show search results, however the approach is quite simple.</p>
<p>The search results can be shown with a repeater-style control or added via code that rebuilds the control hierarchy at the appropriate time.</p>
<p>To retrieve search results from an FSO use the method <span class="f_InlineCode">GetFacetedSearchResults</span>. You can call this method at any time after the selectors are registered with the FSO. This methods returns a <span class="f_InlineCode">DataTable</span> object containing one row for each candidate topic. By default, the FSO will return only the topic ID of hits, however the selectors will make their own requests for information (using the API provided by <span class="f_InlineCode">NetworkedPlanet.EnterpriseService.Web.Model.CommonValueSelectQueryTerms</span>), such as :</p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 10px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="18"><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000;">1.</span></td><td>Topic display name</td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 10px 0px;"><table border="0" cellpadding="0" cellspacing="0" style="line-height: normal;"><tr style="vertical-align:baseline" valign="baseline"><td width="18"><span style="font-size: 12pt; font-family: 'Times New Roman'; color: #000000;">2.</span></td><td>First subject identifier</td></tr></table></div><p>The FSO will ignore duplicates, so it is good practice to always explicitly request the query terms you wish to be returned in the candidate topic results set. This is done by implementing the<span class="f_InlineCode"> NetworkedPlanet.EnterpriseService.Web.Model.IValueSelectQueryTermProvider</span> interface. This mandates a single property: <span class="f_InlineCode">SelectQueryTerms</span> which returns a collection of query terms that will be retrieved during the faceted search.</p>
<p>Commonly the EPiServer Page ID will be required (allowing the search page to display information about each page received). This can be done using the following code:</p>
<p class="p_CodeExample"><span class="f_CodeExample">public&nbsp;IEnumerable&lt;ValueSelectQueryTerm&gt;&nbsp;SelectQueryTerms</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;get</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;ValueSelectQueryTerm[]&nbsp;selectQueryTerms&nbsp;=&nbsp;new&nbsp;ValueSelectQueryTerm[1];</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;selectQueryTerms[0]&nbsp;=&nbsp;new&nbsp;ValueSelectQueryTerm();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;selectQueryTerms[0].ColumnName&nbsp;=&nbsp;"pageid";</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;selectQueryTerms[0].PropertyTypeID&nbsp;=&nbsp;EPiConfig.NP_TM_PageIdOccurrenceTypeId;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;selectQueryTerms;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p>This code creates a simple single-element array and inserts a new <span class="f_InlineCode">ValueSelectQueryTerm</span> instance that selects the page ID occurrence. The <span class="f_InlineCode">ColumnName</span> attribute nominates the name of the column in the data set that will be used, the <span class="f_InlineCode">PropertyTypeID</span> specifies the TMCore topic ID of the occurrence type.</p>
<p>Any occurrence type may be specified in this way. If multiple occurrences are found of the same type then only the first one found will be returned. As this property is accessed several times by the FSO it is more efficient to build constant sets of ValueSelectQueryTerms. The data is never altered by the FSO so this is a safe thing to do.</p>
<p class="p_Notes"><span class="f_Notes">This behaviour may be changed in future versions to return multiple rows for each occurrence found. Therefore when processing the rows in the returned data table you should check for duplicate topic IDs and process them accordingly.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;&lt;summary&gt;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;A&nbsp;set&nbsp;of&nbsp;value&nbsp;select&nbsp;query&nbsp;terms&nbsp;that&nbsp;are&nbsp;required&nbsp;by&nbsp;this&nbsp;search&nbsp;page.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;&lt;/summary&gt;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;&lt;remarks&gt;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;Initialized&nbsp;in&nbsp;the&nbsp;class&nbsp;constructor&nbsp;&lt;see&nbsp;cref="Search()"/&gt;&lt;/remarks&gt;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">private&nbsp;static&nbsp;ValueSelectQueryTerm[]&nbsp;_selectQueryTerms;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;&lt;summary&gt;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;Class&nbsp;constructor&nbsp;that&nbsp;creates&nbsp;the&nbsp;set&nbsp;of&nbsp;query&nbsp;terms&nbsp;required&nbsp;and&nbsp;stores&nbsp;them&nbsp;in&nbsp;&lt;see&nbsp;cref="_selectQueryTerms"/&gt;.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;&lt;/summary&gt;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">static&nbsp;SearchQueryTerms()</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;_selectQueryTerms&nbsp;=&nbsp;new&nbsp;ValueSelectQueryTerm[2];</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;_selectQueryTerms[0]&nbsp;=&nbsp;new&nbsp;ValueSelectQueryTerm();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;_selectQueryTerms[0].ColumnName&nbsp;=&nbsp;"pageid";</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;_selectQueryTerms[0].PropertyTypeID&nbsp;=&nbsp;EPiConfig.NP_TM_PageIdOccurrenceTypeId;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;_selectQueryTerms[1]&nbsp;=&nbsp;new&nbsp;ValueSelectQueryTerm();</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;_selectQueryTerms[1].ColumnName&nbsp;=&nbsp;"topic_name";</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;_selectQueryTerms[1].PropertyTypeID&nbsp;=&nbsp;NetworkedPlanet.EnterpriseServiceClient.TopicMapIndex.SpecialIndexKeys.ID_TO_TOPIC_DISPLAY_NAME;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;&lt;summary&gt;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;Returns&nbsp;the&nbsp;set&nbsp;of&nbsp;query&nbsp;terms&nbsp;generated&nbsp;at&nbsp;class&nbsp;initialization&nbsp;and&nbsp;stored&nbsp;in&nbsp;&lt;see&nbsp;cref="_selectQueryTerms"/&gt;.</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">///&nbsp;&lt;/summary&gt;</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">public&nbsp;IEnumerable&lt;ValueSelectQueryTerm&gt;&nbsp;SelectQueryTerms</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">{</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;&nbsp;get&nbsp;{&nbsp;return&nbsp;_selectQueryTerms;&nbsp;}</span></p>
<p class="p_CodeExample"><span class="f_CodeExample">}</span></p>
<p>You can then register the query term provider during the <span class="f_InlineCode">OnLoad</span> phase using:</p>
<p class="p_CodeExample"><span class="f_CodeExample">this.Fso.RegisterQueryTermProvider(new&nbsp;SearchQueryTerms());</span></p>
<p>To simplify, make the ASPX code-beside file implement the <span class="f_InlineCode">IValueSelectQueryTermProvider</span> interface and register using:</p>
<p class="p_CodeExample"><span class="f_CodeExample">this.Fso.RegisterQueryTermProvider(this);</span></p>
<p>During the <span class="f_InlineCode">PreRender</span> or <span class="f_InlineCode">DataBind</span> phase (i.e. after event processing has taken place) you can then call the <span class="f_InlineCode">GetFacetedSearchResults()</span> method and render the results of the search in any way you choose.</p>

</td></tr></table>

</body>
</html>
