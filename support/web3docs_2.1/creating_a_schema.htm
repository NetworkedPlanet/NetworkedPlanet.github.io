<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- saved from url=(0029)http://www.helpandmanual.com/ -->
<head>
   <title>Creating a Schema</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<script type="text/javascript" src="helpman_topicinit.js"></script>
<!-- Redirect browser to frame page if page is not in the content frame. -->
<script type="text/javascript">
<!--
if (location.search.lastIndexOf("toc=0")<=0) {
  if (parent.frames.length==0) { parent.location.href="index.html?creating_a_schema.htm"; }
  else { parent.quicksync('a6.4.4');  parent.track('topic', location.href);}
}
//-->
</script>
<script type="text/javascript" src="highlight.js"></script></head>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;" onload="highlight();">
<div id="hmpopupDiv" style="visibility:hidden; position:absolute; z-index:1000; "></div>


<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#D0D0D0">
  <tr valign="middle">
    <td align="left">
      <p class="p_Heading1"><span class="f_Heading1">Creating a Schema</span></p>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="introduction.htm">Top</a>&nbsp;
     <a href="defining_schema_constants.htm">Previous</a>&nbsp;
     <a href="creating_a_topic_map.htm">Next</a>
     </span>
    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="top"><td align="left">
<p>The first activity in any Web3 development is to create a schema. Calling <span class="f_FileName">CreateSchema</span> on the <span class="f_FileName">SchemaServiceClient</span> creates a new local schema object. Nothing is sent to the server until <span class="f_FileName">SchemaServiceClient.SaveAsNew()</span> is called. When <span class="f_FileName">SaveAsNew()</span> is called the <span class="f_FileName">Schema</span> object’s <span class="f_FileName">WebAddress</span> property is updated to be the web address (URI) of the schema resource. </p>
<p>The following code example shows the creation of schema which contains a number of topic types, occurrence types and association templates. The comments inline describe in detail what is happening.</p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #808080;">///</span><span style="font-family: 'Consolas'; color: #008000;"> </span><span style="font-family: 'Consolas'; color: #808080;">&lt;summary&gt;</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #808080;">///</span><span style="font-family: 'Consolas'; color: #008000;"> Creates a new schema and returns its web address</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #808080;">///</span><span style="font-family: 'Consolas'; color: #008000;"> </span><span style="font-family: 'Consolas'; color: #808080;">&lt;/summary&gt;</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #808080;">///</span><span style="font-family: 'Consolas'; color: #008000;"> </span><span style="font-family: 'Consolas'; color: #808080;">&lt;returns&gt;</span><span style="font-family: 'Consolas'; color: #008000;">The URI address of the new schema</span><span style="font-family: 'Consolas'; color: #808080;">&lt;/returns&gt;</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">private</span><span style="font-family: 'Consolas';"> </span><span style="font-family: 'Consolas'; color: #2b91af;">Uri</span><span style="font-family: 'Consolas';"> CreateSchema()</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp;{</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// create a new schema client. </span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> schemaClient = </span><span style="font-family: 'Consolas'; color: #0000ff;">new</span><span style="font-family: 'Consolas';"> </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaServiceClient</span><span style="font-family: 'Consolas';">(_baseUri);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// create a new schema. </span><span style="font-family: 'Consolas'; font-weight: bold; color: #00008b;">Note this only creates a local object.</span><span style="font-family: 'Consolas'; color: #008000;"> </span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// it's not until the schema is first saved that it is sent to the server</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// The method takes a label for the schema, the schema subject identifier</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// the schema version and the schema status.</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> schema = schemaClient.CreateSchema(</span><span style="font-family: 'Consolas'; color: #a31515;">"Business Schema"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"http://www.networkedplanet.com/ontology/business-schema"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"1.0"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"draft"</span><span style="font-family: 'Consolas';">);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// Now create all the types and schema constraints</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// First define the occurrence types</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> age = schema.AddOccurrenceType(</span><span style="font-family: 'Consolas'; color: #a31515;">"age"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #0000ff;">new</span><span style="font-family: 'Consolas';"> </span><span style="font-family: 'Consolas'; color: #2b91af;">Uri</span><span style="font-family: 'Consolas';">(</span><span style="font-family: 'Consolas'; color: #2b91af;">XmlSchemaDatatypes</span><span style="font-family: 'Consolas';">.Integer), </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Age);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> weight = schema.AddOccurrenceType(</span><span style="font-family: 'Consolas'; color: #a31515;">"weight"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #0000ff;">new</span><span style="font-family: 'Consolas';"> </span><span style="font-family: 'Consolas'; color: #2b91af;">Uri</span><span style="font-family: 'Consolas';">(</span><span style="font-family: 'Consolas'; color: #2b91af;">XmlSchemaDatatypes</span><span style="font-family: 'Consolas';">.Decimal), </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Weight);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> description = schema.AddOccurrenceType(</span><span style="font-family: 'Consolas'; color: #a31515;">"description"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #0000ff;">new</span><span style="font-family: 'Consolas';"> </span><span style="font-family: 'Consolas'; color: #2b91af;">Uri</span><span style="font-family: 'Consolas';">(</span><span style="font-family: 'Consolas'; color: #2b91af;">XmlSchemaDatatypes</span><span style="font-family: 'Consolas';">.String),</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Description);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// define all the types and express the constraints between the types </span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// and the occurrence types</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// define constraints that express that topics of type person should have exactly 1 age and may have at most 1 description</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> person = schema.AddTopicType(</span><span style="font-family: 'Consolas'; color: #a31515;">"person"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Person);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;person.AddOccurrenceConstraint(description, 0, 1);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;person.AddOccurrenceConstraint(age, 1, 1);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// define constraints that express that topics of type product should have exactly 1 weight and may have at most 1 description</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> product = schema.AddTopicType(</span><span style="font-family: 'Consolas'; color: #a31515;">"product"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Product);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;product.AddOccurrenceConstraint(description, 0, 1);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;product.AddOccurrenceConstraint(weight, 0, 1);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// define constraints that express that topics of type company may have at most 1 description</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> company = schema.AddTopicType(</span><span style="font-family: 'Consolas'; color: #a31515;">"company"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Company);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;company.AddOccurrenceConstraint(description, 0, 1);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// Association templates define the way in which topics of certain types can be connected together.</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// Define a binary association template called 'worksfor'. That relates topics of type person and</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// company in the roles of employee and employer.</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> worksfor = schema.AddAssociationType(</span><span style="font-family: 'Consolas'; color: #a31515;">"worksfor"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.WorksFor);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> employee = schema.AddRoleType(</span><span style="font-family: 'Consolas'; color: #a31515;">"employee"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Employee);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> employer = schema.AddRoleType(</span><span style="font-family: 'Consolas'; color: #a31515;">"employer"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Employer);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;schema.CreateAssociationTemplate(worksfor, employee, person, employer, company);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// Define an association template where the same topic type plays roles on either side. </span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// Instances of the Person topic type play the role of manager and minion in the association manages. </span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> manages = schema.AddAssociationType(</span><span style="font-family: 'Consolas'; color: #a31515;">"manages"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Manages);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> manager = schema.AddRoleType(</span><span style="font-family: 'Consolas'; color: #a31515;">"manager"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Manager);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> minion = schema.AddRoleType(</span><span style="font-family: 'Consolas'; color: #a31515;">"minion"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Minion);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;schema.CreateAssociationTemplate(manages, manager, person, minion, person);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// Define a reflexive association template. This is one where their are always exactly two roles</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// and the role type is the same for both. The constraining topic type is of course the same both both</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// roles. This template defines friendOf, where instances of the topic type person play the role of</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// friend.</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> friendOf = schema.AddAssociationType(</span><span style="font-family: 'Consolas'; color: #a31515;">"friendOf"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.FriendOf);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">var</span><span style="font-family: 'Consolas';"> friend = schema.AddRoleType(</span><span style="font-family: 'Consolas'; color: #a31515;">"friend"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #a31515;">"en"</span><span style="font-family: 'Consolas';">, </span><span style="font-family: 'Consolas'; color: #2b91af;">SchemaConstants</span><span style="font-family: 'Consolas';">.Friend);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;schema.CreateReflexiveAssociationTemplate(friendOf, friend, person);</span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #008000;">// save the schema and return the web address</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;schemaClient.SaveAsNew(schema);</span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  </span><span style="font-family: 'Consolas'; color: #0000ff;">return</span><span style="font-family: 'Consolas';"> schema.WebAddress; </span></p>
<p><span style="font-family: 'Consolas';"> &nbsp; &nbsp; &nbsp; &nbsp;}</span><span class="f_CodeExample"> &nbsp; &nbsp; &nbsp; </span></p>
<p class="p_CodeExample"><span class="f_CodeExample">&nbsp;</span></p>

</td></tr></table>

</body>
</html>
